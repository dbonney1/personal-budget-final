[{"C:\\Users\\falin\\dev\\pb_final_project\\src\\index.js":"1","C:\\Users\\falin\\dev\\pb_final_project\\src\\App.js":"2","C:\\Users\\falin\\dev\\pb_final_project\\src\\reportWebVitals.js":"3","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\containers\\Dashboard\\Dashboard.js":"4","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\containers\\SignUp\\SignUp.js":"5","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\containers\\HomePage\\HomePage.js":"6","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\containers\\SignUp\\Login.js":"7","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\containers\\Logout\\Logout.js":"8","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\hoc\\Layout\\Layout.js":"9","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\hoc\\Auxiliary\\Auxiliary.js":"10","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\UI\\Button\\Button.js":"11","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\utils\\Form\\Form.js":"12","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\components\\Hero\\Hero.js":"13","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\UI\\MonthSelector\\MonthSelector.js":"14","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\components\\Nav\\NavItems\\NavItems.js":"15","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\UI\\Input\\Input.js":"16","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\components\\Article\\Article.js":"17","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\components\\Nav\\NavItems\\NavItem\\NavItem.js":"18"},{"size":502,"mtime":1608327250682,"results":"19","hashOfConfig":"20"},{"size":1080,"mtime":1608327563183,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1608325763518,"results":"22","hashOfConfig":"20"},{"size":19602,"mtime":1608338932551,"results":"23","hashOfConfig":"20"},{"size":2077,"mtime":1608327085802,"results":"24","hashOfConfig":"20"},{"size":1723,"mtime":1608327227804,"results":"25","hashOfConfig":"20"},{"size":2328,"mtime":1608327087473,"results":"26","hashOfConfig":"20"},{"size":498,"mtime":1608327297685,"results":"27","hashOfConfig":"20"},{"size":410,"mtime":1608327249659,"results":"28","hashOfConfig":"20"},{"size":61,"mtime":1607795846982,"results":"29","hashOfConfig":"20"},{"size":217,"mtime":1608245846688,"results":"30","hashOfConfig":"20"},{"size":431,"mtime":1608327248702,"results":"31","hashOfConfig":"20"},{"size":1262,"mtime":1608308511300,"results":"32","hashOfConfig":"20"},{"size":865,"mtime":1608251012965,"results":"33","hashOfConfig":"20"},{"size":1841,"mtime":1608309959769,"results":"34","hashOfConfig":"20"},{"size":266,"mtime":1608256658076,"results":"35","hashOfConfig":"20"},{"size":228,"mtime":1607808885393,"results":"36","hashOfConfig":"20"},{"size":359,"mtime":1608310392381,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"zqmpz7",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\falin\\dev\\pb_final_project\\src\\index.js",[],["80","81"],"C:\\Users\\falin\\dev\\pb_final_project\\src\\App.js",[],"C:\\Users\\falin\\dev\\pb_final_project\\src\\reportWebVitals.js",[],"C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\containers\\Dashboard\\Dashboard.js",["82","83","84","85"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Pie, Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport Button from \"../../UI/Button/Button\";\r\nimport Input from \"../../UI/Input/Input\";\r\nimport Form from \"../../utils/Form/Form\";\r\nimport MonthSelector from \"../../UI/MonthSelector/MonthSelector\";\r\nimport classes from \"./Dashboard.module.css\";\r\nimport Hero from \"../../components/Hero/Hero\";\r\nimport NavItems from \"../../components/Nav/NavItems/NavItems\";\r\nconst Dashboard = () => {\r\n  const [budgets, setBudgets] = useState([]);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [budget, setBudget] = useState(\"\");\r\n  const [tags, setTags] = useState(\"\");\r\n  const [dataColor, setDataColor] = useState(\"#fff\");\r\n  const [month, setMonth] = useState(\"January\");\r\n  const [monthViewing, setMonthViewing] = useState(\"January\");\r\n  const [actualSpent, setActualSpent] = useState([]);\r\n  const [user_FK, setUser_FK] = useState(\"\");\r\n  const [charts, setCharts] = useState([]);\r\n  const [chartBudgets, setChartBudgets] = useState([]);\r\n  const [line, setLine] = useState([]);\r\n  const [bar, setBar] = useState([]);\r\n  const [barQuery, setBarQuery] = useState(\"\");\r\n  const [show, setShow] = useState({\r\n    pie: false,\r\n    line: false,\r\n    bar: false,\r\n  });\r\n\r\n  // load in budgets from database after initial render\r\n  useEffect(() => {\r\n    const userEmail = localStorage.getItem(\"userEmail\");\r\n    const token = localStorage.getItem(\"jwt\");\r\n    axios\r\n      .get(`/api/budget/${userEmail}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        setBudgets(res.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const getBudget = () => {\r\n    // use budget endpoint to retrieve data\r\n    const userEmail = localStorage.getItem(\"userEmail\");\r\n    const token = localStorage.getItem(\"jwt\");\r\n    axios\r\n      .get(`/api/budget/${userEmail}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        const newBudgets = res.data;\r\n        setBudgets(newBudgets);\r\n      })\r\n      .then(() => {\r\n        buildCharts();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  // used for submitting a new budget\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    const userEmail = localStorage.getItem(\"userEmail\");\r\n    const token = localStorage.getItem(\"jwt\");\r\n\r\n    // if an invalid request made, return\r\n    if (\r\n      title.length === 0 ||\r\n      budget.length === 0 ||\r\n      tags.length === 0\r\n    )\r\n      return;\r\n\r\n    const budgetData = {\r\n      title: title,\r\n      budget: budget,\r\n      tags: tags,\r\n      user_FK: userEmail,\r\n      dataColor: dataColor,\r\n      month: month,\r\n    };\r\n\r\n    // headers to send in request\r\n    const headers = {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    };\r\n\r\n    axios\r\n      .post(\"/api/budget\", budgetData, {\r\n        headers: headers,\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        console.log(\"Inserted one budget\");\r\n\r\n        // if successful, modify budgets to include new data and rebuild charts\r\n        const newBudgets = Array.from(budgets.slice());\r\n        newBudgets.push(budgetData);\r\n\r\n        setBudgets([...newBudgets]);\r\n      })\r\n      .then(() => {\r\n        buildCharts();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  // used to submit actual item expenses\r\n  const submitActualExpenses = (event, amountSpent) => {\r\n    event.preventDefault();\r\n    const token = localStorage.getItem(\"jwt\");\r\n\r\n    console.log(\"submitting actual expenses\");\r\n    amountSpent.forEach((spent) => {\r\n      const budgetData = {\r\n        actualSpent: spent.amount,\r\n      };\r\n\r\n      // headers to send in request\r\n      const headers = {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      };\r\n\r\n      axios\r\n        .put(`/api/budget/${spent.id}`, budgetData, {\r\n          headers: headers,\r\n        })\r\n        .then((res) => {\r\n          // if successful inform user\r\n          console.log(res.data);\r\n          console.log(`Updated budget with id ${spent.id}`);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    });\r\n  };\r\n\r\n  // handler for changing actual expense values\r\n  const handleActualSpent = (id, amount, actualSpentVals) => {\r\n    const newActualSpent = Array.from(actualSpentVals.slice());\r\n    // find the item's index in newActualSpent and change its amount\r\n    const changedIndex = newActualSpent.findIndex((spent) => spent.id === id);\r\n    newActualSpent[changedIndex].amount = amount;\r\n    console.log(amount);\r\n    // set actualSpent to newActualSpent\r\n    setActualSpent(newActualSpent);\r\n  };\r\n\r\n  // used for determining total expected budget for each month\r\n  const determineExpectedMonthlyBudgets = () => {\r\n    // months to be considered\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n\r\n    let userBudgets = [];\r\n    let userBudgetsByMonth = [];\r\n\r\n    // cycle through each month, comparing to each budget and finding matching sets\r\n    for (let month of months) {\r\n      userBudgets = Array.from(budgets.slice());\r\n      userBudgets = userBudgets.filter((budget) => {\r\n        return budget.month === month;\r\n      });\r\n      // if no matches found, simply push a budget of 0 to the userBudgets array and skip to next cycle\r\n      if (!userBudgets.length) {\r\n        userBudgetsByMonth.push(0);\r\n        continue;\r\n      }\r\n\r\n      // add all the budgets associated with each month together and push the monthly budget total to the thisMonthsExpectedBudget array\r\n      let thisMonthsExpectedBudget = userBudgets\r\n        .map((budget) => budget.budget)\r\n        .reduce((accumulator, currentValue) => accumulator + currentValue);\r\n      userBudgetsByMonth.push(thisMonthsExpectedBudget);\r\n    }\r\n    return userBudgetsByMonth;\r\n  };\r\n\r\n  // used for determining total expenses each month\r\n  const determineActualMonthlyBudgets = () => {\r\n    // months to be considered\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n\r\n    let userBudgets = [];\r\n    let userBudgetsByMonth = [];\r\n\r\n    // cycle through each month and create matching sets\r\n    for (let month of months) {\r\n      userBudgets = Array.from(budgets.slice());\r\n      userBudgets = userBudgets.filter((budget) => {\r\n        return budget.month === month;\r\n      });\r\n      // if no matches, simply push amount of 0 to array and skip to next iteration\r\n      if (!userBudgets.length) {\r\n        userBudgetsByMonth.push(0);\r\n        continue;\r\n      }\r\n      // add up all budget amts of a given month together and push to array\r\n      let thisMonthsActualBudget = userBudgets\r\n        .map((budget) => budget.actualSpent)\r\n        .reduce((accumulator, currentValue) => accumulator + currentValue);\r\n      userBudgetsByMonth.push(thisMonthsActualBudget);\r\n    }\r\n    return userBudgetsByMonth;\r\n  };\r\n\r\n  // used to determine total expected budget per year for an item\r\n  const determineExpectedSpentPerYear = (item) => {\r\n    let userBudgets = [];\r\n    let expectedAmountSpent = 0;\r\n\r\n    // filter budgets to include only entries containing a given item\r\n    userBudgets = Array.from(budgets.slice());\r\n    userBudgets = userBudgets.filter((budget) => {\r\n      return budget.title === item;\r\n    });\r\n\r\n    // if no matches, return 0 as amount\r\n    if (!userBudgets.length) {\r\n      return 0;\r\n    }\r\n\r\n    // if matches found, add up each corresponding budget amt and return the total\r\n    expectedAmountSpent = userBudgets\r\n      .map((budget) => budget.budget)\r\n      .reduce((accumulator, currentValue) => accumulator + currentValue);\r\n\r\n    return expectedAmountSpent;\r\n  };\r\n\r\n  // used to determine total actual amt spent per year for an item\r\n  const determineActualSpentPerYear = (item) => {\r\n    let userBudgets = [];\r\n    let actualAmountSpent = 0;\r\n\r\n    // filter budgets to include only entries containing a given item\r\n    userBudgets = Array.from(budgets.slice());\r\n    userBudgets = userBudgets.filter((budget) => {\r\n      return budget.title === item;\r\n    });\r\n\r\n    // if no matches, return 0 as amount\r\n    if (!userBudgets.length) {\r\n      return 0;\r\n    }\r\n\r\n    // if matches found, add up each corresponding amount spent and return the total\r\n    actualAmountSpent = userBudgets\r\n      .map((budget) => budget.actualSpent)\r\n      .reduce((accumulator, currentValue) => accumulator + currentValue);\r\n\r\n    return actualAmountSpent;\r\n  };\r\n\r\n  // used to build line graph\r\n  const buildLines = () => {\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n\r\n    const expectedMonthlyBudgets = determineExpectedMonthlyBudgets();\r\n    const actualMonthlyBudgets = determineActualMonthlyBudgets();\r\n\r\n    let newLine = [];\r\n\r\n    // use expected and actual budget data\r\n    const lineBudgetData = {\r\n      labels: months,\r\n      datasets: [\r\n        {\r\n          label: \"Expected Budgets\",\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: \"rgba(75,192,192,1)\",\r\n          borderColor: \"rgba(0,0,0,1)\",\r\n          borderWidth: 2,\r\n          data: expectedMonthlyBudgets,\r\n        },\r\n        {\r\n          label: \"Actual Budgets\",\r\n          fill: true,\r\n          lineTension: 0.5,\r\n          backgroundColor: \"violet\",\r\n          borderColor: \"rgba(0,0,0,1)\",\r\n          borderWidth: 2,\r\n          data: actualMonthlyBudgets,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // create a line chart using the data\r\n    const lineChart = (\r\n      <div>\r\n        <Line\r\n          data={lineBudgetData}\r\n          options={{\r\n            title: {\r\n              display: true,\r\n              text: \"Expected VS. Actual Monthly Budgets\",\r\n              fontSize: 20,\r\n            },\r\n            legend: {\r\n              display: true,\r\n              position: \"right\",\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n\r\n    newLine.push(lineChart);\r\n    setLine(newLine);\r\n\r\n    // now show the line chart\r\n    setShow({\r\n      pie: false,\r\n      line: true,\r\n      bar: false,\r\n    });\r\n  };\r\n\r\n  // used to build a bar chart comparing expected budget vs amount spent yearly for an item\r\n  const buildBar = (item) => {\r\n    // if no item entered, return\r\n    if (!item.length) return;\r\n    const expectedSpentPerYear = determineExpectedSpentPerYear(item);\r\n    const actualSpentPerYear = determineActualSpentPerYear(item);\r\n\r\n    const newBar = [];\r\n    // use expectedSpentPerYear and actualSpentPerYear as data\r\n    const barBudgetData = {\r\n      labels: [\"Expected Budget\", \"Actual Spent\"],\r\n      datasets: [\r\n        {\r\n          label: item,\r\n          backgroundColor: \"rgba(75,192,192,1)\",\r\n          borderColor: \"rgba(0,0,0,1)\",\r\n          borderWidth: 2,\r\n          data: [expectedSpentPerYear, actualSpentPerYear],\r\n        },\r\n      ],\r\n    };\r\n\r\n    // create a bar chart using the data\r\n    const barChart = (\r\n      <div>\r\n        <Bar\r\n          data={barBudgetData}\r\n          options={{\r\n            title: {\r\n              display: true,\r\n              text: \"Yearly Budget Comparison\",\r\n              fontSize: 20,\r\n            },\r\n            legend: {\r\n              display: true,\r\n              position: \"right\",\r\n            },\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  ticks: {\r\n                    beginAtZero: true,\r\n                    min: 0,\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n    newBar.push(barChart);\r\n    setBar(newBar);\r\n\r\n    // now show the bar chart\r\n    setShow({\r\n      pie: false,\r\n      line: false,\r\n      bar: true,\r\n    });\r\n  };\r\n\r\n  // used to build a pie chart\r\n  const buildCharts = () => {\r\n    // show the pie chart\r\n    setShow({\r\n      pie: true,\r\n      line: false,\r\n      bar: false,\r\n    });\r\n\r\n    // return if no new budgets exist in state\r\n    if (budgets.length === chartBudgets.length) return;\r\n\r\n    const newCharts = [];\r\n    const newChartBudgets = [];\r\n\r\n    // month selected to view\r\n    const month = monthViewing;\r\n    let monthBudgets = [];\r\n    let monthBudget = [];\r\n\r\n    // create an array of budgets associated with each month\r\n\r\n    monthBudget = Array.from(budgets.slice());\r\n    monthBudget = monthBudget.filter((budget) => {\r\n      return budget.month === month;\r\n    });\r\n\r\n    // if month data found, push each budget to array\r\n    if (monthBudget.length && monthBudget !== undefined) {\r\n      // push each added budget to newChartsBudget\r\n      monthBudget.forEach((budget) => newChartBudgets.push(budget));\r\n      monthBudgets.push(monthBudget);\r\n    }\r\n\r\n    // cycle through each data point in array to create a pie slice\r\n    for (let month of monthBudgets) {\r\n      const monthBudgetData = {\r\n        labels: month.map((budget) => budget.title),\r\n        datasets: [\r\n          {\r\n            label: month[0].month,\r\n            backgroundColor: month.map((budget) => budget.dataColor),\r\n            hoverBackgroundColor: month.map((budget) => budget.dataColor),\r\n            data: month.map((budget) => budget.budget),\r\n          },\r\n        ],\r\n      };\r\n\r\n      const newActualSpent = [];\r\n      const inputsForActualSpent = [];\r\n      let counter = [];\r\n\r\n      // now build a chart using the data, along with a form to enter actual expenses for each budget\r\n      const chart = (\r\n        <div key={month[0].month} className={classes.Pie}>\r\n          <h2>Enter Actual Expenses!</h2>\r\n          <Pie\r\n            data={monthBudgetData}\r\n            width={600}\r\n            options={{\r\n              title: {\r\n                display: true,\r\n                text: `${monthBudgetData.datasets[0].label} Budget`,\r\n                fontSize: 20,\r\n              },\r\n              legend: {\r\n                display: false,\r\n              },\r\n            }}\r\n          />\r\n          <Form\r\n            submitHandler={(event) => {\r\n              submitActualExpenses(event, newActualSpent);\r\n              getBudget();\r\n            }}\r\n            submitValue=\"Submit Actual Expenses\"\r\n          >\r\n            {month.forEach((monthlyBudget) => {\r\n              console.log('Monthly budget', monthlyBudget);\r\n              const id = monthlyBudget.id;\r\n              const actualSpentDetails = {\r\n                id: id,\r\n                amount: monthlyBudget.actualSpent,\r\n              };\r\n\r\n              console.log(id);\r\n              console.log('details', actualSpentDetails);\r\n\r\n              newActualSpent.push(actualSpentDetails);\r\n              setActualSpent([newActualSpent]);\r\n\r\n              let input = (\r\n                <Input\r\n                  inputClass={classes.AmountBox}\r\n                  placeholder={monthlyBudget.title}\r\n                  type=\"text\"\r\n                  name=\"amountSpent\"\r\n                  change={(event) => {\r\n                    handleActualSpent(\r\n                      monthlyBudget.id,\r\n                      event.target.value,\r\n                      newActualSpent\r\n                    );\r\n                  }}\r\n                  value={newActualSpent.amount}\r\n                />\r\n              );\r\n              inputsForActualSpent.push(input);\r\n              counter++;\r\n            })}\r\n            {inputsForActualSpent}\r\n          </Form>\r\n        </div>\r\n      );\r\n      newCharts.push(chart);\r\n    }\r\n    // now set chart to include new chart data\r\n    setChartBudgets(newChartBudgets);\r\n    setCharts(newCharts);\r\n  };\r\n\r\n  // static data including charts and forms for user to enter new budgets and query data\r\n  return (\r\n    <div>\r\n      <NavItems />\r\n      <Hero />\r\n      <h2 className={classes.Heading}>Dashboard</h2>\r\n      <div className={classes.Dashboard}>\r\n        <div className={classes.InputSpace}>\r\n          <h3>Enter a new budget!</h3>\r\n          <Form submitHandler={submitHandler} submitValue=\"Submit Budget\">\r\n            <div className={classes.SketchWrapper}>\r\n              <SketchPicker\r\n                color={dataColor}\r\n                onChangeComplete={(color) => setDataColor(color.hex)}\r\n              />\r\n            </div>\r\n            <div className={classes.NewBudgetWrapper}>\r\n              <div className={classes.BoxName}>\r\n                <p>Title</p>\r\n                <Input\r\n                  inputClass={classes.NewInputBox}\r\n                  type=\"text\"\r\n                  name=\"title\"\r\n                  change={(event) => setTitle(event.target.value)}\r\n                  value={title}\r\n                />\r\n              </div>\r\n              <div className={classes.BoxName}>\r\n                <p>Budget</p>\r\n                <Input\r\n                  inputClass={classes.NewInputBox}\r\n                  type=\"text\"\r\n                  name=\"budget\"\r\n                  change={(event) => setBudget(event.target.value)}\r\n                  value={budget}\r\n                />\r\n              </div>\r\n              <div className={classes.BoxName}>\r\n                <p>Tags</p>\r\n                <Input\r\n                  inputClass={classes.NewInputBox}\r\n                  type=\"text\"\r\n                  name=\"tags\"\r\n                  change={(event) => setTags(event.target.value)}\r\n                  value={tags}\r\n                />\r\n              </div>\r\n            </div>\r\n            <MonthSelector\r\n              monthClass={classes.MonthSelection}\r\n              change={(event) => setMonth(event.target.value)}\r\n            />\r\n          </Form>\r\n        </div>\r\n      </div>\r\n      <div className={classes.Charts}>\r\n        <div className={classes.BudgetWrapper}>\r\n          <Button buttonClass={classes.InputButtonBlock} click={getBudget}>\r\n            Get Budget Chart\r\n          </Button>\r\n          <MonthSelector\r\n            monthClass={classes.MonthSelectionBlock}\r\n            change={(event) => {\r\n              setMonthViewing(event.target.value);\r\n              buildCharts();\r\n            }}\r\n          />\r\n        </div>\r\n        <Button buttonClass={classes.InputButton} click={buildLines}>\r\n          Budget/Actual Comparison\r\n        </Button>\r\n        <div className={classes.InputSpace}>\r\n          <h3>Check Yearly Spending for a budget type!</h3>\r\n          <Input\r\n            inputClass={classes.InputBox}\r\n            type=\"text\"\r\n            name=\"Yearly Spending\"\r\n            change={(event) => setBarQuery(event.target.value)}\r\n            value={barQuery}\r\n          />\r\n          <Button\r\n            buttonClass={classes.InputButton}\r\n            click={() => buildBar(barQuery)}\r\n          >\r\n            Yearly Spending\r\n          </Button>\r\n        </div>\r\n        {show.pie ? charts : null}\r\n        {show.line ? line : null}\r\n        {show.bar ? bar : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\containers\\SignUp\\SignUp.js",[],"C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\containers\\HomePage\\HomePage.js",["86"],"import React from \"react\";\r\nimport Aux from \"../../hoc/Auxiliary/Auxiliary\";\r\nimport Article from \"../../components/Article/Article\";\r\nimport budgetImg1 from \"../../images/bills.jpeg\";\r\nimport classes from \"./HomePage.module.css\";\r\nimport NavItems from \"../../components/Nav/NavItems/NavItems\";\r\nimport Hero from \"../../components/Hero/Hero\";\r\n\r\nconst homepage = () => {\r\n  // homepage includes exclusively static data\r\n  return (\r\n    <Aux>\r\n      <NavItems />\r\n      <Hero />\r\n      <div className={classes.HomePage}>\r\n        <div className={classes.Container}>\r\n          <div className={classes.InfoBlock}>\r\n            <h1>The Number One Budget Management App</h1>\r\n            <Article>\r\n              This absolutely awesome budget management application provides you\r\n              with the tools you need to ensure you can track and monitor your\r\n              monthly budgets and determine how closely you're adhering to it by\r\n              providing your expenses month by month. Why would you ever want\r\n              anything else?\r\n            </Article>\r\n          </div>\r\n          <img src={budgetImg1} className={classes.Image} alt=\"Budget Image\" />\r\n          <div className={classes.InfoBlock}>\r\n            <h1>Many Tools At Your Dispense</h1>\r\n            <Article>\r\n              By creating an account, this budget application provides you with\r\n              the ability to create your own monthly budgets, and through the\r\n              dashboard you will be able to view your budget allocation through\r\n              a pie chart, bar graph and line graph. Sign up today!\r\n            </Article>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Aux>\r\n  );\r\n};\r\n\r\nexport default homepage;\r\n","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\containers\\SignUp\\Login.js",[],"C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\containers\\Logout\\Logout.js",["87"],"import jwt from \"express-jwt\";\r\nimport React from \"react\";\r\nimport Hero from \"../../components/Hero/Hero\";\r\nimport NavItems from \"../../components/Nav/NavItems/NavItems\";\r\nconst logout = () => {\r\n  // remove user's token upon logging out\r\n  localStorage.removeItem(\"jwt\");\r\n  localStorage.removeItem(\"userEmail\");\r\n  return (\r\n    <div>\r\n      <NavItems />\r\n      <Hero />\r\n      <h1>Thanks for visiting!</h1>\r\n      <h2>Successfully logged out.</h2>\r\n    </div>\r\n  );\r\n};\r\nexport default logout;\r\n","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\hoc\\Layout\\Layout.js",["88","89"],"import React from \"react\";\r\nimport Aux from \"../Auxiliary/Auxiliary\";\r\nimport classes from \"./Layout.module.css\";\r\nimport Hero from \"../../components/Hero/Hero\";\r\nimport NavItems from \"../../components/Nav/NavItems/NavItems\";\r\nconst layout = (props) => {\r\n  return (\r\n    <Aux>\r\n      <main className={classes.Content}>\r\n        {props.children}\r\n      </main>\r\n    </Aux>\r\n  );\r\n};\r\n\r\nexport default layout;\r\n","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\hoc\\Auxiliary\\Auxiliary.js",[],"C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\UI\\Button\\Button.js",[],"C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\utils\\Form\\Form.js",["90","91"],"import React, { Component } from \"react\";\r\n\r\nimport Button from \"../../UI/Button/Button\";\r\nimport Input from \"../../UI/Input/Input\";\r\n\r\nclass Form extends Component {\r\n  render() {\r\n    return (\r\n      <form className={this.props.submitClass} onSubmit={this.props.submitHandler}>\r\n        {this.props.children}\r\n        <input type=\"submit\" value={this.props.submitValue} />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\components\\Hero\\Hero.js",[],"C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\UI\\MonthSelector\\MonthSelector.js",[],"C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\components\\Nav\\NavItems\\NavItems.js",[],"C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\UI\\Input\\Input.js",[],"C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\components\\Article\\Article.js",[],"C:\\Users\\falin\\dev\\pb_final_project\\src\\frontend\\components\\Nav\\NavItems\\NavItem\\NavItem.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":21,"column":10,"nodeType":"98","messageId":"99","endLine":21,"endColumn":21},{"ruleId":"96","severity":1,"message":"100","line":22,"column":10,"nodeType":"98","messageId":"99","endLine":22,"endColumn":17},{"ruleId":"96","severity":1,"message":"101","line":22,"column":19,"nodeType":"98","messageId":"99","endLine":22,"endColumn":29},{"ruleId":"96","severity":1,"message":"102","line":549,"column":15,"nodeType":"98","messageId":"99","endLine":549,"endColumn":22},{"ruleId":"103","severity":1,"message":"104","line":27,"column":11,"nodeType":"105","endLine":27,"endColumn":80},{"ruleId":"96","severity":1,"message":"106","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":11},{"ruleId":"96","severity":1,"message":"107","line":4,"column":8,"nodeType":"98","messageId":"99","endLine":4,"endColumn":12},{"ruleId":"96","severity":1,"message":"108","line":5,"column":8,"nodeType":"98","messageId":"99","endLine":5,"endColumn":16},{"ruleId":"96","severity":1,"message":"109","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":14},{"ruleId":"96","severity":1,"message":"110","line":4,"column":8,"nodeType":"98","messageId":"99","endLine":4,"endColumn":13},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'actualSpent' is assigned a value but never used.","Identifier","unusedVar","'user_FK' is assigned a value but never used.","'setUser_FK' is assigned a value but never used.","'counter' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'jwt' is defined but never used.","'Hero' is defined but never used.","'NavItems' is defined but never used.","'Button' is defined but never used.","'Input' is defined but never used.","no-global-assign","no-unsafe-negation"]